# Even though this template understands the output from
#   - show ip cef [vrf NAME] [PREFIX | INTERFACE] [detail]
# INDEX file forces you to use 'detail' keyword, or there
# will be no match. This is done to simplify INDEX file
# matching logic, otherwise matching regex is too complex.
#
# This template is compatible with IOS v12.x and above,
# including IOS-XE. There are two versions of output
# with significant differences depending on IOS version.
# Template is able to recognize both versions and captures
# same structured data regardless of IOS version.
#
Value Required PREFIX ((?:\d{1,3}\.){3}\d{1,3}\/\d{1,2})
Value List FLAGS ([^,\]\n]+)
Value TYPE ((?:no\s)?(?:[a-z]+))
# Nexthop and Interface are lists to support ECMP
# Usually these will be single item lists
# However, if there are multiple paths available
#     these will contain one item per route/path
Value List NEXTHOP ((?:\d{1,3}\.){3}\d{1,3})
Value List INTERFACE ([A-Za-z][A-Za-z0-9\.\/-]+)

Start
  # >>> Parse EXCEPTIONS
  # CEF is not enabled
  ^%IPv4\s+CEF\s+not\s+running$$ -> End
  # Invalid prefix
  ^\s+Invalid\s+prefix/mask -> End
  #
  # >>> Parse HEADING
  # Ignore Junk (irrelevant output)
  ^IP(?:v4)?\s+CEF
  ^VRF|Adjacency
  ^\s+\d+\s+(?:routes|instant|leaves|load|prefixes|in-place)
  ^\s+(?:Default|Table|Database|Resolution|Non-stop|Switchover)
  ^\s+(?:universal|refcounts)
  ^.*?CEF\s+resets
  #
  # >>> Parse CEF ENTRIES
  # Entry detected, begin analysis
  ^(?:\d{1,3}\.){3}\d{1,3}\/\d{1,2} -> Continue.Record
  #
  # >>>>>> Cisco IOS >v15.x
  # Extract prefix (no flags)
  ^${PREFIX},\s+epoch(?:(?!flags).)*$$
  # Extract prefix with flags
  ^${PREFIX}.*?flags -> Continue
  # Attempt to extract first flag (if present)
  ^\d.*?flags\s+\[?${FLAGS} -> Continue
  # Attempt to extract other flags (up to 6)
  ^\d.*?flags\s+\[?(?:[^\]\n]+?,\s+){1}${FLAGS} -> Continue
  ^\d.*?flags\s+\[?(?:[^\]\n]+?,\s+){2}${FLAGS} -> Continue
  ^\d.*?flags\s+\[?(?:[^\]\n]+?,\s+){3}${FLAGS} -> Continue
  ^\d.*?flags\s+\[?(?:[^\]\n]+?,\s+){4}${FLAGS} -> Continue
  ^\d.*?flags\s+\[?(?:[^\]\n]+?,\s+){5}${FLAGS} -> Continue
  # Stop processing flags (6+)
  ^\d.*?flags.*?$$
  # Extract nexthop IP address
  ^\s+recursive\s+via\s+${NEXTHOP}
  # Extract type and interface/nexthop, if available)
  # Type values (IOS >v15.x):
  #     - attached
  #     - receive
  #     - drop
  #     - no route
  #     - nexthop
  #     - multicast
  ^\s+${TYPE}(?<=receive)\s+for\s+${INTERFACE}
  ^\s+${TYPE}(?<=attached)\s+to\s+${INTERFACE}
  ^\s+${TYPE}(?<=drop)$$
  ^\s+${TYPE}(?<=no route)$$
  ^\s+${TYPE}(?<=receive)$$
  ^\s+${TYPE}(?<=multicast)$$
  ^\s+${TYPE}(?<=nexthop)\s+${NEXTHOP}\s+${INTERFACE}
  #
  # >>>>>> Cisco IOS 12.x ISR G1 (legacy CEF formatting)
  # Extract prefix
  ^${PREFIX},\s+version -> Continue
  # Extract flags (if available)
  ^.*?epoch\s+\d+,\s+${FLAGS} -> Continue
  ^.*?epoch\s+\d+,\s+(?:[^,\n]+,\s+){1}${FLAGS} -> Continue
  ^.*?epoch\s+\d+,\s+(?:[^,\n]+,\s+){2}${FLAGS} -> Continue
  ^.*?epoch\s+\d+,\s+(?:[^,\n]+,\s+){3}${FLAGS} -> Continue
  # Stop processing flags (max 4)
  ^.*?epoch.*?$$
  # Extract extra flag, such as recursive
  ^.*?dependenc(?:y|ies),\s+${FLAGS} -> Continue
  # Extract interface for glean adjacency (it's the only place)
  ^\s+via\s+${INTERFACE},\s+\d+\s+depend
  # Stop procssing line with 'dependencies'
  #   Interface and flags are extracted by now
  ^.*?depend
  # Extract nexthop IP address
  ^\s+next\s+hop\s+${NEXTHOP}\s*$$
  # Extract nexthop IP address and interface
  ^\s+next\s+hop\s+${NEXTHOP},\s+${INTERFACE}
  # Extract type, where available
  # Type values (IOS v12.x ISR G1):
  #     - null (same as receive with Null0 interface in IOS v15.x)
  #     - glean (same as attached in IOS v15.x)
  #     - cached (same as nexthop in IOS v15.x)
  #     - drop
  #     - if type is None, then it's receive (check flags)
  ^\s+valid\s+${TYPE}\s+adjacency$$
  #
  # >>> Parse OTHER BODY (irrelevant output)
  ^\s+Adj\s+source
  ^\s+Special\s+source
  ^\s+Interface\s+source
  ^\s+DefNet\s+source
  ^\s+Q[Oo]S
  ^\s+Covered\s+dependent
  ^\s+need\s+deagg
  ^\s+notify\s+cover
  ^\s+Dependent\s+covered
  ^.*?RR\s+source
  ^\s+(?:Net)?Flow:
  ^\s+Interest\s+List:
  ^\s+-\s+
  ^\s+BFD\s+state
  ^\s+\d+\s+IPL\s+source
  ^\d+\s+packets
  #
  # >>> Parse SPECIAL
  ^\s*$$
  ^. -> Error